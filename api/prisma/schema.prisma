// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String       @id
  name        String
  discord     String       @unique
  connections Connection[]
  runners     Runner[]
}

model Connection {
  service  String
  username String
  user     User   @relation(fields: [userId], references: [id])
  userId   String

  @@unique([service, userId])
}

model Event {
  id      String   @id
  slug    String   @unique
  name    String
  beginAt DateTime @db.Timestamptz()

  runners  Runner[]
  run      Run[]
  Schedule Schedule[]
}

enum RunType {
  Single
  Race
  Coop
  Relay
}

model Run {
  id             String           @id
  game           String
  category       String
  type           RunType
  estimateInSec  Int
  console        String
  eventId        String
  event          Event            @relation(fields: [eventId], references: [id])
  runParticipant RunParticipant[]
  ScheduleRow    ScheduleRow[]
}

model Runner {
  id             String           @id
  userId         String
  user           User             @relation(fields: [userId], references: [id])
  eventId        String
  event          Event            @relation(fields: [eventId], references: [id])
  availabilities Availability[]
  runParticipant RunParticipant[]

  @@unique([userId, eventId])
}

model RunParticipant {
  runId    String
  run      Run    @relation(fields: [runId], references: [id])
  runnerId String
  runner   Runner @relation(fields: [runnerId], references: [id])

  @@id([runId, runnerId])
}

model Availability {
  runnerId String
  runner   Runner   @relation(fields: [runnerId], references: [id])
  sort     Int
  beginAt  DateTime @db.Timestamptz()
  endAt    DateTime @db.Timestamptz()

  @@id([runnerId, sort])
}

model Schedule {
  id             String             @id
  eventId        String
  event          Event              @relation(fields: [eventId], references: [id])
  beginAt        DateTime           @db.Timestamptz()
  slug           String
  description    String
  rows           ScheduleRow[]
  beggining      ScheduleBeginning?
  PublicSchedule PublicSchedule[]

  @@unique([eventId, slug])
}

model ScheduleRow {
  id         String             @id
  scheduleId String
  schedule   Schedule           @relation(fields: [scheduleId], references: [id])
  runId      String             @unique
  run        Run                @relation(fields: [runId], references: [id])
  next       String?            @unique
  nextRow    ScheduleRow?       @relation("NextRow", fields: [next], references: [id])
  setupInSec Int
  before     ScheduleRow?       @relation("NextRow")
  beginning  ScheduleBeginning?
}

model ScheduleBeginning {
  scheduleId String      @unique
  schedule   Schedule    @relation(fields: [scheduleId], references: [id])
  rowId      String      @unique
  row        ScheduleRow @relation(fields: [rowId], references: [id])
}

model PublicSchedule {
  scheduleId  String
  schedule    Schedule @relation(fields: [scheduleId], references: [id])
  data        Json
  publishedAt DateTime @db.Timestamptz()
  revision    Int

  @@unique([scheduleId, revision])
}
